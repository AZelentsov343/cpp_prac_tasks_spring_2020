# 1

В пространстве имен numbers реализуйте класс complex для комплексных чисел над типом double. Класс должен определять:

Конструкторы по умолчанию, от одного и двух аргументов. Должен реализовываться одним конструктором.
Явный (explicit) конструктор из типа std::string, который преобразовывает строку в значение complex.
Строка имеет формат (RE,IM), то есть вещественная и мнимая части (числа типа double) записываются через запятую
в круглых скобках.
Например, строка "(1.0,-5)" определяет комплексное число (1.0,-5.0). Проверка на ошибки не требуется.
Методы re и im для получения вещественной и мнимой части числа.
Метод abs2 для получения квадрата модуля числа.
Метод abs для получения модуля числа.
Метод to_string, который преобразовывает комплексное число в строковое представление (см. выше) и возвращает объект типа
std::string.
Вещественные числа выводятся с 10 значащими цифрами в формате %.10g.
Операции +=, -=, *=, /=.
Операции сложения, вычитания, умножения и деления в обычной инфиксной форме,
которые должны быть определены через соответствующие операции присваивания.
Префиксную операцию ~, которая возвращает новое число, комплексно-сопряженное к аргументу.
Префиксную операцию - смены знака.



# 2

В пространстве имен numbers реализуйте класс complex_stack,
который будет реализовывать функциональность иммутабельного стека комплексных чисел из предыдущей задачи.

Реализация не должна использовать стандартные контейнерные классы (vector, stack и т. п.).

Класс должен реализовывать:

конструктор по умолчанию.
конструкторы, деструкторы и операции, необходимые для корректного управления памятью.
метод size для получения числа элементов в стеке (возвращает size_t).
доступ к произвольному элементу стека только на чтение с помощью операции [].
бинарный оператор <<, у которого первый аргумент - complex_stack, а второй аргумент - complex,
бинарный оператор возвращает новый стек, в который добавлен указанный элемент. Исходный стек не изменяется.
унарный оператор +, который возвращает элемент типа complex с вершины стека.
унарный оператор ~, который удаляет один элемент из стека и возвращает модифицированный стек,
исходный стек при этом не изменяется.
На проверку сдавайте только класс complex_stack.

Возможные ошибки (извлечение из пустого стека, доступ за пределами стека) игнорируйте.

Дополнительно реализуйте:

Семантику переноса в конструкторе, присваивании и операциях << и ~
placement new для минимизации вызовов конструкторов при перевыделении памяти



# 3

В пространстве имен numbers реализуйте функцию eval с прототипом:

complex eval(const std::vector<std::string> &args, const complex &z);
Функции подается на вход польская инверсная запись выражения над комплексными числами с одной переменной и
значение переменной. В качестве результата функция возвращает вычисленное значение.

Каждый элемент польской записи находится в отдельном элементе вектора.

Возможные ошибки при вычислении игнорируйте.

Вы должны сдать только функцию eval.

В польской записи допускаются следующие элементы:

Запись комплексного числа в виде (RE,IM) (см. предыдущие задачи).
Обозначение переменной "z" (строчная латинская буква).
Знаки бинарных операций +, -, *, /.
Знак унарной операции !, которая заносит в стек элемент, находящийся на верхушке стека.
Знак унарной операции ;, которая удаляет элемент с верхушки стека.
Знак унарной операции ~, которая вычисляет комплексно-сопряженное число.
Знак унарной операции #, которая меняет знак у числа.
Обратите внимание, что польская запись z1 z2 - обозначает (z1 - z2), а не (z2 - z1)!

Каждая строка в массиве строк содержит ровно один элемент польской записи. Пробельные символы отсутствуют.

Реализуйте отображение из операций в действия с помощью отображения (std::map) анонимных функций.



# 4
Программе в аргументах командной строки передаются:

Комплексное число C.
Вещественное число R.
Целое число N.
Остальные аргументы - запись функции одного комплексного аргумента в польской записи.
На стандартный поток вывода напечатайте комплексное число I -
результат вычисления криволинейного интеграла по замкнутому контуру - окружности с центром в точке C и радиусом R.

Для вычисления используйте метод прямоугольников. Для этого окружность делится на N частей.

В заголовочном файле cmc_complex.h находится реализация класса numbers::complex,
в заголовочном файле cmc_complex_stack.h находится реализация класса numbers::complex_stack,
в заголовочном файле cmc_complex_eval.h находится реализация функции eval.
